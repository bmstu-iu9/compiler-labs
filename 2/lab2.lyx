#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\begin_preamble
\usepackage{indentfirst}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language russian
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 12
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 0
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 0
\use_package mhchem 1
\use_package stackrel 0
\use_package stmaryrd 0
\use_package undertilde 0
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\topmargin 2cm
\rightmargin 2cm
\bottommargin 2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style swiss
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Лабораторная работа №2
\begin_inset Newline newline
\end_inset


\begin_inset Quotes cld
\end_inset

Синтаксические деревья
\begin_inset Quotes crd
\end_inset


\end_layout

\begin_layout Author
Скоробогатов С.Ю.
\end_layout

\begin_layout Date
20 августа 2013
\end_layout

\begin_layout Section
Цель работы
\end_layout

\begin_layout Standard
Целью данной работы является изучение представления синтаксических деревьев
 в памяти компилятора и приобретение навыков преобразования синтаксических
 деревьев.
\end_layout

\begin_layout Section
Исходные данные
\end_layout

\begin_layout Standard
В качестве исходного языка и языка реализации программы преобразования синтаксич
еских деревьев выберем язык Go.
 Пакеты 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

"go/token"
\end_layout

\end_inset

, 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

"go/ast"
\end_layout

\end_inset

 и 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

"go/parser"
\end_layout

\end_inset

 из стандартной библиотеки этого языка содержат готовый 
\begin_inset Quotes cld
\end_inset

front-end
\begin_inset Quotes crd
\end_inset

 компилятора языка Go, а пакет 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

"go/format"
\end_layout

\end_inset

 восстанавливает исходный текст программы по её синтаксическому дереву.
 Документацию по этим пакетам можно посмотреть по адресу 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://golang.org/pkg/go/
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Построение синтаксического дерева по исходному тексту программы выполянется
 функцией 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

parser.ParseFile
\end_layout

\end_inset

, возвращающей указатель типа 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

*ast.File
\end_layout

\end_inset

 на корень дерева.
\end_layout

\begin_layout Standard
Синтаксические деревья в памяти представляются значениями структур из пакета
 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

"go/ast"
\end_layout

\end_inset

.
 Изучать синтаксические деревья удобно по их листингам, порождаемым функцией
 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

ast.Fprint
\end_layout

\end_inset

.
 Небольшая программа 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

astprint
\end_layout

\end_inset

, которая, ко всему прочему, демонстрирует вызов парсера для построения
 синтаксического дерева программы, представлена на листинге 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:программа-astprint.go"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "alg:программа-astprint.go"

\end_inset

Исходный текст программы astprint.go
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset listings
lstparams "basicstyle={\ttfamily},numbers=left,numberstyle={\tiny},tabsize=4"
inline false
status open

\begin_layout Plain Layout

package main
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

import (
\end_layout

\begin_layout Plain Layout

	"fmt"
\end_layout

\begin_layout Plain Layout

	"go/ast"
\end_layout

\begin_layout Plain Layout

	"go/parser"
\end_layout

\begin_layout Plain Layout

	"go/token"
\end_layout

\begin_layout Plain Layout

	"os"
\end_layout

\begin_layout Plain Layout

)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

func main() {
\end_layout

\begin_layout Plain Layout

	if len(os.Args) != 2 {
\end_layout

\begin_layout Plain Layout

		fmt.Printf("usage: astprint <filename.go>
\backslash
n")
\end_layout

\begin_layout Plain Layout

		return
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	// Создаём хранилище данных об исходных файлах
\end_layout

\begin_layout Plain Layout

	fset := token.NewFileSet()
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	// Вызываем парсер
\end_layout

\begin_layout Plain Layout

	if file, err := parser.ParseFile(
\end_layout

\begin_layout Plain Layout

		fset,                 // данные об исходниках
\end_layout

\begin_layout Plain Layout

		os.Args[1],           // имя файла с исходником программы
\end_layout

\begin_layout Plain Layout

		nil,                  // пусть парсер сам загрузит исходник
\end_layout

\begin_layout Plain Layout

		parser.ParseComments, // приказываем сохранять комментарии
\end_layout

\begin_layout Plain Layout

	); err == nil {
\end_layout

\begin_layout Plain Layout

		// Если парсер отработал без ошибок, печатаем дерево
\end_layout

\begin_layout Plain Layout

		ast.Fprint(os.Stdout, fset, file, nil)
\end_layout

\begin_layout Plain Layout

	} else {
\end_layout

\begin_layout Plain Layout

		// в противном случае, выводим сообщение об ошибке
\end_layout

\begin_layout Plain Layout

		fmt.Printf("Error: %v", err)
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Напомним, что для компиляции программы 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

astprint
\end_layout

\end_inset

 нужно выполнить команду
\end_layout

\begin_layout LyX-Code
go build astprint.go
\end_layout

\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Standard
Обход синтаксического дерева в глубину реализован в функции 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

ast.Inspect
\end_layout

\end_inset

, которая вызывает переданную ей в качестве параметра функцию для каждого
 посещённого узла дерева.
 С помощью этой функции удобно осуществлять поиск узлов определённого типа
 в дереве.
 Например, представленная на листинге 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:Исходный-текст-функции"

\end_inset

 функция 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

insertHello
\end_layout

\end_inset

 выполняет поиск всех операторов 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

if
\end_layout

\end_inset

 в дереве и вставляет в начало положительной ветки каждого найденного оператора
 печать строки 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

"hello"
\end_layout

\end_inset

.
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "alg:Исходный-текст-функции"

\end_inset

Исходный текст функции 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

insertHello
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset listings
lstparams "basicstyle={\ttfamily},numbers=left,numberstyle={\tiny},tabsize=4"
inline false
status open

\begin_layout Plain Layout

func insertHello(file *ast.File) {
\end_layout

\begin_layout Plain Layout

	// Вызываем обход дерева, начиная от корня
\end_layout

\begin_layout Plain Layout

	ast.Inspect(file, func(node ast.Node) bool {
\end_layout

\begin_layout Plain Layout

        // Для каждого узла дерева
\end_layout

\begin_layout Plain Layout

		if ifStmt, ok := node.(*ast.IfStmt); ok {
\end_layout

\begin_layout Plain Layout

            // Если этот узел имеет тип *ast.IfStmt,
\end_layout

\begin_layout Plain Layout

            // добавляем в начало массива операторов
\end_layout

\begin_layout Plain Layout

            // положительной ветки if'a новый оператор
\end_layout

\begin_layout Plain Layout

			ifStmt.Body.List = append(
\end_layout

\begin_layout Plain Layout

				[]ast.Stmt{
\end_layout

\begin_layout Plain Layout

                    // Новый оператор -- выражение
\end_layout

\begin_layout Plain Layout

					&ast.ExprStmt{
\end_layout

\begin_layout Plain Layout

                        // Выражение -- вызов функции
\end_layout

\begin_layout Plain Layout

						X: &ast.CallExpr{
\end_layout

\begin_layout Plain Layout

                            // Функция -- "fmt.Printf"
\end_layout

\begin_layout Plain Layout

							Fun: &ast.SelectorExpr{
\end_layout

\begin_layout Plain Layout

								X:   ast.NewIdent("fmt"),
\end_layout

\begin_layout Plain Layout

								Sel: ast.NewIdent("Printf"),
\end_layout

\begin_layout Plain Layout

							},
\end_layout

\begin_layout Plain Layout

                            // Её параметр -- строка "hello"
\end_layout

\begin_layout Plain Layout

							Args: []ast.Expr{
\end_layout

\begin_layout Plain Layout

								&ast.BasicLit{
\end_layout

\begin_layout Plain Layout

									Kind:  token.STRING,
\end_layout

\begin_layout Plain Layout

									Value: "
\backslash
"hello
\backslash
"",
\end_layout

\begin_layout Plain Layout

								},
\end_layout

\begin_layout Plain Layout

							},
\end_layout

\begin_layout Plain Layout

						},
\end_layout

\begin_layout Plain Layout

					},
\end_layout

\begin_layout Plain Layout

				},
\end_layout

\begin_layout Plain Layout

				ifStmt.Body.List...,
\end_layout

\begin_layout Plain Layout

			)
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

		// Возвращая true, мы разрешаем выполнять обход
\end_layout

\begin_layout Plain Layout

		// дочерних узлов
\end_layout

\begin_layout Plain Layout

		return true
\end_layout

\begin_layout Plain Layout

	})
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Восстановление исходного текста программы из синтаксического дерева осуществляет
ся функцией 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

format.Node
\end_layout

\end_inset

.
 Эта функция не обращает внимания на координаты узлов дерева, выполняя полное
 переформатирование текста программы, поэтому при преобразовании дерева
 координаты новых узлов прописывать не нужно.
\end_layout

\begin_layout Section
Задание
\end_layout

\begin_layout Standard
Выполнение лабораторной работы состоит из нескольких этапов:
\end_layout

\begin_layout Enumerate
подготовка исходного текста демонстрационной программы, которая в дальнейшем
 будет выступать в роли объекта преобразования (демонстрационная программа
 должна размещаться в одном файле и содержать функцию 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

main
\end_layout

\end_inset

);
\end_layout

\begin_layout Enumerate
компиляция и запуск программы 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

astprint
\end_layout

\end_inset

 для изучения структуры синтаксического дерева демонстрационной программы;
\end_layout

\begin_layout Enumerate
разработка программы, осуществляющей преобразование синтаксического дерева
 и порождение по нему новой программы;
\end_layout

\begin_layout Enumerate
тестирование работоспособности разработанной программы на исходном тексте
 демонстрационной программы.
\end_layout

\begin_layout Standard
Преобразование синтаксического дерева должно вносить в преобразуемую программу
 дополнительные возможности, перечисленные в
\begin_inset space ~
\end_inset

таблице 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Дополнительные-возможности"

\end_inset

 и
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Дополнительные-возможности-1"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:Дополнительные-возможности"

\end_inset

Дополнительные возможности, приобретаемые преобразованной программой
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="17" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="left" valignment="top" width="90line%">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Подсчёт количества вызовов каждой глобальной функции в ходе работы программы.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Подсчёт общего количества итераций всех циклов в процессе выполнения программы.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Вычисление максимальной глубины стека вызовов функций, достигнутой в ходе
 работы программы (считать, что программа не порождает сопрограмм).
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Подсчёт, сколько раз в ходе работы программы вызывались сопрограммы.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Объявления переменных в конструкции 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

var
\end_layout

\end_inset

 в исходном тексте программы должны быть отсортированы по алфавиту.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Объявления глобальных функций должны располагаться в конце программы в
\begin_inset space ~
\end_inset

алфавитном порядке.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
7
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Любая неанонимная функция, возвращающая ровно одно значение типа 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

int
\end_layout

\end_inset

, должна выводить своё имя и возвращаемое значение.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
После выхода из любого цикла должно выводиться количество выполненных итераций.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
9
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Динамические срезы, создаваемые функцией 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

make
\end_layout

\end_inset

, должны иметь в два раза большую вместимость, чем в исходной программе
 (при этом их длина меняться не
\begin_inset space ~
\end_inset

должна).
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Если в исходной программе при создании отображения с помощью функции 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

make
\end_layout

\end_inset

 не указан размер отображения, следует этот размер сделать равным 16.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
11
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Каждое вхождение строкового литерала в текст программы должно быть заменено
 идентификатором константы, добавленной в
\begin_inset space ~
\end_inset

начало программы и
\begin_inset space ~
\end_inset

имеющей соответствующее значение (при этом значения добавляемых констант
 не
\begin_inset space ~
\end_inset

должны дублироваться).
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
12
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Заменить константы, задаваемые через 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

iota
\end_layout

\end_inset

 на
\begin_inset space ~
\end_inset

явно заданные значения.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
13
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Подсчитать число присваиваний в
\begin_inset space ~
\end_inset

процессе выполнения программы.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
14
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Любая неанонимная функция должна в
\begin_inset space ~
\end_inset

начале выполнения и
\begin_inset space ~
\end_inset

перед возвратом (оператором 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

return
\end_layout

\end_inset

 или при достижении конца блока) выводить слово 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

"Starts "
\end_layout

\end_inset

 и
\begin_inset space ~
\end_inset


\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

"Ends "
\end_layout

\end_inset

, соответственно, своё имя и
\begin_inset space ~
\end_inset

время, прошедшее с
\begin_inset space ~
\end_inset

начала выполнения программы (см.
\begin_inset space ~
\end_inset

функции 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

time.Now()
\end_layout

\end_inset

 и
\begin_inset space ~
\end_inset


\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

time.Since()
\end_layout

\end_inset

, можно использовать 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

defer
\end_layout

\end_inset

).
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
15
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Заменить вхождения глобальной переменной 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

LINE
\end_layout

\end_inset

 на
\begin_inset space ~
\end_inset

номер текущей строки, 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

FILE
\end_layout

\end_inset

 — на
\begin_inset space ~
\end_inset

имя текущего файла.
 В
\begin_inset space ~
\end_inset

исходной программе эти переменные должны быть объявлены в
\begin_inset space ~
\end_inset

глобальной области видимости с
\begin_inset space ~
\end_inset

типами 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

int
\end_layout

\end_inset

 и
\begin_inset space ~
\end_inset


\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

string
\end_layout

\end_inset

, соответственно (в
\begin_inset space ~
\end_inset

противном случае следует выдать ошибку).
 В
\begin_inset space ~
\end_inset

новой программе они должны отсутствовать.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
16
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Заменить вхождения глобальной переменной 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

FUNCNAME
\end_layout

\end_inset

 на
\begin_inset space ~
\end_inset

имя неанонимной функции, в
\begin_inset space ~
\end_inset

которой переменная упоминается, либо на
\begin_inset space ~
\end_inset


\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

"(global)"
\end_layout

\end_inset

, если переменная упоминается в
\begin_inset space ~
\end_inset

глобальном контексте.
 В
\begin_inset space ~
\end_inset

исходной программе переменная 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

FUNCNAME
\end_layout

\end_inset

 должна быть объявлена в
\begin_inset space ~
\end_inset

глобальной области видимости типа 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

string
\end_layout

\end_inset

, в
\begin_inset space ~
\end_inset

новой программе она должна отсутстовать.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
17
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Заменить запись 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

x := expr
\end_layout

\end_inset

 на
\begin_inset space ~
\end_inset


\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

var x = expr
\end_layout

\end_inset

.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:Дополнительные-возможности-1"

\end_inset

Дополнительные возможности, приобретаемые преобразованной программой (продолжени
е)
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="16" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="left" valignment="top" width="90line%">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
18
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Заменить запись 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

var x = expr
\end_layout

\end_inset

 на
\begin_inset space ~
\end_inset


\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

x := expr
\end_layout

\end_inset

.
 Внимание! Синтаксис с
\begin_inset space ~
\end_inset


\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

:=
\end_layout

\end_inset

 допустим только внутри функций, поэтому вне функций замену осуществлять
 не
\begin_inset space ~
\end_inset

нужно.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
19
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Заменить вызов функции 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

assert(expr)
\end_layout

\end_inset

 на
\begin_inset space ~
\end_inset

конструкцию 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

if ! (expr) { fmt.Println("filename.go:NN:assertion failed"); }
\end_layout

\end_inset

, где вместо 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

filename.go
\end_layout

\end_inset

 и
\begin_inset space ~
\end_inset


\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

NN
\end_layout

\end_inset

 должны находиться имя файла и
\begin_inset space ~
\end_inset

номер строки с
\begin_inset space ~
\end_inset


\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

assert
\end_layout

\end_inset

.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
20
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Заменить операторы инкремента 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

x++
\end_layout

\end_inset

 и
\begin_inset space ~
\end_inset

декремента 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

x--
\end_layout

\end_inset

 на
\begin_inset space ~
\end_inset

полную запись, соответственно, 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

x = x + 1
\end_layout

\end_inset

 и
\begin_inset space ~
\end_inset


\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

x = x - 1
\end_layout

\end_inset

.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
21
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Заменить запись сокращённых операторов присваивания 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

x OP= y
\end_layout

\end_inset

 на
\begin_inset space ~
\end_inset

соответствующие полные записи 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

x = x OP y
\end_layout

\end_inset

.
 (
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

OP
\end_layout

\end_inset

 может быть 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

+
\end_layout

\end_inset

, 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

-
\end_layout

\end_inset

, 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

|
\end_layout

\end_inset

, 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

^
\end_layout

\end_inset

, 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

*
\end_layout

\end_inset

, 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

/
\end_layout

\end_inset

, 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

%
\end_layout

\end_inset

, 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

<<
\end_layout

\end_inset

, 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

>>
\end_layout

\end_inset

, 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

&
\end_layout

\end_inset

, 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

&^
\end_layout

\end_inset

).
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
22
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Каждый оператор 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

for
\end_layout

\end_inset

 вида 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

for expr {...}
\end_layout

\end_inset

 преобразовать в
\begin_inset space ~
\end_inset

оператор 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

for fmt.Println("init"); expr; fmt.Println("next") {...}
\end_layout

\end_inset

.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
23
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Вместо каждой именованной константы, имя которой заканчивается на
\begin_inset space ~
\end_inset


\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

_
\end_layout

\end_inset

, подставить её значение.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
24
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Для каждого присваивания распечатать имя переменной и
\begin_inset space ~
\end_inset

значение присваиваемого выражения.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
25
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Подсчет общего количества операций сложения, вычитания, умножения и деления
 во
\begin_inset space ~
\end_inset

время выполнения программы (подсчет каждой операции вести отдельно).
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
26
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Разбить блоки объявления нескольких переменных на несколько блоков объявления
 одной переменной.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
27
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Подсчет времени выполнения каждой глобальной функции относительно времени
 выполнения всей программы.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
28
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Для каждого оператора 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

if
\end_layout

\end_inset

 подсчитать количество переходов по
\begin_inset space ~
\end_inset

положительной ветке относительно общего количества вызова конкретного оператора
 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

if
\end_layout

\end_inset

 (во
\begin_inset space ~
\end_inset

время выполнения программы).
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
29
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Заменить все операторы 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

switch
\end_layout

\end_inset

 стандартного (C-образного) вида на
\begin_inset space ~
\end_inset

аналогичные по
\begin_inset space ~
\end_inset

логике работы операторы 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

switch
\end_layout

\end_inset

 без выражения.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
30
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Во
\begin_inset space ~
\end_inset

всех вызовах функции 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

fmt.Printf
\end_layout

\end_inset

 добавить в
\begin_inset space ~
\end_inset

форматную строку префикс вида 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

LINE(FUNC_NAME): 
\end_layout

\end_inset

, где 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

LINE
\end_layout

\end_inset

 — текущий номер строки, 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

FUNC_NAME
\end_layout

\end_inset

 — имя функции, из
\begin_inset space ~
\end_inset

которой происходит вызов 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

fmt.Printf
\end_layout

\end_inset

.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
31
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Заменить все умножения и
\begin_inset space ~
\end_inset

деления на
\begin_inset space ~
\end_inset

число, являющееся степенью двойки, на
\begin_inset space ~
\end_inset

соответствующий побитовый сдвиг.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
32
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Заменить все операторы 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

if
\end_layout

\end_inset

 без отрицательной ветки на
\begin_inset space ~
\end_inset

аналогичный по
\begin_inset space ~
\end_inset

логике работы оператор 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

switch
\end_layout

\end_inset

 без выражения.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
33
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Если у функции используется сокращенное указание типа для нескольких аргументов
 (например 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

func f(a, b int)
\end_layout

\end_inset

), то
\begin_inset space ~
\end_inset

явно указать тип для каждого аргумента отдельно (например 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

func f(a int, b int)
\end_layout

\end_inset

).
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\end_body
\end_document
